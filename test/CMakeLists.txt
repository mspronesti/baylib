add_executable(bnet_test bnet_test.cpp)
add_executable(rank_test rank_test.cpp)
add_executable(cpt_test  cpt_test.cpp)
add_executable(parser_test parser_test.cpp)
add_executable(logic_sampling_test logic_sampling_test.cpp)
add_executable(gibbs_sampling_test gibbs_sampling_test.cpp)

set_target_properties( bnet_test PROPERTIES OUTPUT_NAME "bnet" )
set_target_properties( rank_test PROPERTIES OUTPUT_NAME "rank" )
set_target_properties( cpt_test PROPERTIES OUTPUT_NAME "cpt" )
set_target_properties( parser_test PROPERTIES OUTPUT_NAME "parser")
set_target_properties( logic_sampling_test PROPERTIES OUTPUT_NAME "logicsamp")
set_target_properties( gibbs_sampling_test PROPERTIES OUTPUT_NAME "gibbsamp")
# google test
find_package(GTest REQUIRED)


target_link_libraries(bnet_test gtest gtest_main pthread)
target_link_libraries(rank_test gtest gtest_main pthread OpenCL::OpenCL)
target_link_libraries(cpt_test gtest gtest_main pthread)
target_link_libraries(parser_test gtest gtest_main pthread)
target_link_libraries(logic_sampling_test gtest gtest_main pthread OpenCL::OpenCL boost_thread Boost::system Boost::thread)
target_link_libraries(gibbs_sampling_test gtest gtest_main pthread boost_thread Boost::system Boost::thread)

add_test( bnet_test bnet)
add_test( rank_test rank)
add_test( cpt_test cpt)
add_test( parser_test parser)
add_test( logic_sampling_test logicsamp)
add_test( gibbs_sampling_test gibbsamp)